{"version":3,"sources":["components/Popup.tsx","client.ts","images/0.svg","images/1.svg","images/2.svg","images/3.svg","images/4.svg","images/5.svg","images/6.svg","components/Username.tsx","components/Room.tsx","components/Home.tsx","components/CreateRoom.tsx","App.tsx","index.tsx"],"names":["GameResult","socket","socketIO","Username","className","type","placeholder","maxLength","size","value","this","props","username","onChange","onUsernameChange","style","display","onClick","submitUsername","React","Component","RoomStatus","Popup","result","Letter","n","letter","Message","data","guess","Log","message","StartButton","isHost","gameStarted","svgs","svg0","svg1","svg2","svg3","svg4","svg5","svg6","Room","state","roomId","wordLength","letterElements","knownLetters","needsUsername","isTurn","chat","kick","svg","players","endMessage","undefined","chatInput","createRef","messages","wrongLetters","keyDown","e","key","current","emit","match","preventDefault","target","length","setState","name","startGame","i","push","word","renderLetters","params","id","on","status","STARTED","alert","INVALID","addMessage","indices","renderWord","addLog","innerHTML","log","WIN","setTimeout","LOSE","filter","item","connected","connect","removeAllListeners","disconnect","to","ref","map","onKeyDown","disabled","src","alt","Home","code","join","handleCodeChange","Number","parseInt","handleJoin","OKAY","off","min","max","String","CreateRoom","onWordChange","submit","App","basename","process","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c033ac4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport enum GameResult {\r\n    WIN = 'You Won!',\r\n    LOSE = 'Game over'\r\n}\r\n\r\nclass Popup extends React.Component<{ result: GameResult }> {\r\n    render() {\r\n        return <div className=\"popup rounded-card\"><h1>{this.props.result}</h1></div>;\r\n    }\r\n}\r\n\r\nexport default Popup;","import socketIO from 'socket.io-client';\r\n\r\nconst serverURL = !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? 'http://localhost:4000' : 'https://js0mmer-hangman.herokuapp.com/';\r\nconst socket = socketIO(serverURL);\r\n\r\nexport default socket;","export default __webpack_public_path__ + \"static/media/0.32c2d0f6.svg\";","export default __webpack_public_path__ + \"static/media/1.5b893ed1.svg\";","export default __webpack_public_path__ + \"static/media/2.025c09bb.svg\";","export default __webpack_public_path__ + \"static/media/3.b37d4c95.svg\";","export default __webpack_public_path__ + \"static/media/4.b887b4a3.svg\";","export default __webpack_public_path__ + \"static/media/5.ed941d7a.svg\";","export default __webpack_public_path__ + \"static/media/6.ec0b881b.svg\";","import React from 'react';\r\n\r\ninterface IProps {\r\n  onUsernameChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n  submitUsername: (event: React.MouseEvent<HTMLSpanElement>) => void,\r\n  username: string\r\n}\r\n\r\nclass Username extends React.Component<IProps> {\r\n  render() {\r\n    return(\r\n    <div className=\"create-room container\">\r\n        <div className=\"rounded-card\">\r\n        <h3 className=\"heading\">Enter a username</h3>\r\n        <div>\r\n            <div className=\"word-input\">\r\n            <input type=\"text\" placeholder=\"Type here...\" maxLength={16} size={16} value={this.props.username} onChange={this.props.onUsernameChange} />\r\n            <span className=\"underline\"></span>\r\n            </div>\r\n            <span className={'button button-small' + (this.props.username === '' ? ' disabled' : '')} style={{ display: 'inline' }} onClick={this.props.submitUsername}>Submit</span>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Username;","import React from 'react';\r\nimport svg0 from '../images/0.svg';\r\nimport svg1 from '../images/1.svg';\r\nimport svg2 from '../images/2.svg';\r\nimport svg3 from '../images/3.svg';\r\nimport svg4 from '../images/4.svg';\r\nimport svg5 from '../images/5.svg';\r\nimport svg6 from '../images/6.svg';\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\r\nimport socket from '../client';\r\nimport Username from './Username';\r\nimport Popup, { GameResult } from './Popup';\r\n\r\nfunction Letter(n: number, letter?: string) {\r\n  return (\r\n    <h1 key={n} className=\"letter\">\r\n      {letter}\r\n    </h1>\r\n  );\r\n}\r\n\r\nfunction Message(props: { data: GuessObject }) {\r\n  return (\r\n    <li className=\"message\"><span className=\"username\">{props.data.username}</span>{props.data.guess}</li>\r\n  );\r\n}\r\n\r\nfunction Log(props: {  message: string }) {\r\n  return (\r\n    <li className=\"log\">{props.message}</li>\r\n  );\r\n}\r\n\r\nfunction StartButton(props: { isHost: boolean, onClick: (event: React.MouseEvent<HTMLSpanElement>) => void, gameStarted: boolean }) {\r\n  if (props.isHost && !props.gameStarted) {\r\n    return <span className=\"button button-small\" onClick={props.onClick}>Start</span>\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface GuessObject {\r\n  username: string,\r\n  guess: string,\r\n  indices: number[],\r\n  result?: boolean\r\n}\r\n\r\ninterface MatchParams {\r\n  id: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<MatchParams> {}\r\n\r\ninterface IState {\r\n  roomId: string,\r\n  wordLength: number,\r\n  letterElements: JSX.Element[],\r\n  knownLetters: { [index: number]: string },\r\n  needsUsername: boolean,\r\n  username: string,\r\n  isHost: boolean,\r\n  gameStarted: boolean,\r\n  isTurn: boolean,\r\n  chat: JSX.Element[],\r\n  kick: boolean,\r\n  svg: number,\r\n  players: string[],\r\n  endMessage: JSX.Element | undefined\r\n}\r\n\r\nexport enum RoomStatus {\r\n  STARTED = 'STARTED',\r\n  INVALID = 'INVALID',\r\n  OKAY = 'OKAY'\r\n}\r\n\r\nconst svgs = [svg0, svg1, svg2, svg3, svg4, svg5, svg6];\r\n\r\nclass Room extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    roomId: '', wordLength: 0, letterElements: [], knownLetters: {},\r\n    needsUsername: true, username: '', isHost: false, gameStarted: false,\r\n    isTurn: false,\r\n    chat: [<Log key={0} message=\"Please wait for the host to start the game\" />],\r\n    kick: false, svg: 0, players: [], endMessage: undefined };\r\n  private chatInput = React.createRef<HTMLInputElement>();\r\n  private messages = React.createRef<HTMLUListElement>();\r\n  private wrongLetters = React.createRef<HTMLHeadingElement>();\r\n\r\n  renderLetters() {\r\n    let letterElements: JSX.Element[] = [];\r\n    for (let i = 0; i < this.state.wordLength; i++) {\r\n      letterElements.push(Letter(i, this.state.knownLetters[i] ? this.state.knownLetters[i] : ''));\r\n    }\r\n\r\n    this.setState({ letterElements });\r\n  }\r\n\r\n  renderWord(word: string) {\r\n    let letterElements: JSX.Element[] = [];\r\n    for (let i = 0; i < word.length; i++) {\r\n      letterElements.push(Letter(i, word[i]));\r\n    }\r\n\r\n    this.setState({ letterElements });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderLetters();\r\n\r\n    let roomId = this.props.match.params.id;\r\n\r\n    this.setState({ roomId });\r\n\r\n    socket.on('room_status', (status: RoomStatus) => {\r\n      switch(status) {\r\n        case RoomStatus.STARTED:\r\n          alert('Game already started!');\r\n          this.setState({ kick: true });\r\n          break;\r\n        case RoomStatus.INVALID:\r\n          alert('Game does not exist!');\r\n          this.setState({ kick: true });\r\n          break;\r\n      }\r\n    });\r\n\r\n    socket.on('guess', (data: GuessObject) => {\r\n      this.addMessage(data);\r\n\r\n      switch (data.result) { // if correct then fill in blanks\r\n        case true:\r\n          if (data.guess.length === 1) { // if guessing letter\r\n            let knownLetters = this.state.knownLetters;\r\n\r\n            for (var i = 0; i < data.indices.length; i++) { \r\n              knownLetters[data.indices[i]] = data.guess;\r\n            }\r\n\r\n            this.setState({ knownLetters });\r\n            this.renderLetters();\r\n          } else { // if guessed word\r\n            this.renderWord(data.guess);\r\n          }\r\n\r\n          this.addLog('Correct!');\r\n          break;\r\n        case false: // wrong\r\n          if (data.guess.length === 1) { // if guessing letter\r\n            if (this.wrongLetters.current == null) return;\r\n            this.wrongLetters.current.innerHTML += data.guess; // add to wrong letters\r\n          }\r\n\r\n          this.setState({ svg: this.state.svg + 1 });\r\n          this.addLog('Nope');\r\n          break;\r\n        default:\r\n          this.addLog('Already guessed!');\r\n      }\r\n    });\r\n\r\n    socket.on('is_host', () => {\r\n      this.setState({ isHost: true, chat: [] });\r\n      this.addLog('Start the game when you are ready');\r\n    })\r\n\r\n    socket.on('start_game', () => {\r\n      this.addLog('The game has begun');\r\n\r\n      this.setState({ gameStarted: true })\r\n    });\r\n\r\n    socket.on('is_turn', (log: boolean) => {\r\n      if (log) {\r\n        this.addLog(\"It's your turn\");\r\n      }\r\n\r\n      this.setState({ isTurn: true });\r\n    });\r\n\r\n    socket.on('turn_end', () => {\r\n      this.setState({ isTurn: false });\r\n    });\r\n\r\n    socket.on('win', () => {\r\n      this.setState({ endMessage: <Popup result={GameResult.WIN} /> });\r\n\r\n      setTimeout(() => {\r\n        this.setState({ kick: true });\r\n      }, 3000);\r\n    });\r\n\r\n    socket.on('lose', () => {\r\n      this.setState({ endMessage: <Popup result={GameResult.LOSE} /> });\r\n\r\n      setTimeout(() => {\r\n        this.setState({ kick: true });\r\n      }, 3000);\r\n    });\r\n\r\n    socket.on('word_length', (wordLength: number) => {\r\n      this.setState({ wordLength });\r\n      this.renderLetters();\r\n    });\r\n\r\n    socket.on('no_players', () => {\r\n      alert(\"Can't start game without any players\");\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      socket.emit('join_room', roomId);\r\n    });\r\n\r\n    socket.on('player_join', (name: string) => {\r\n      if (name === this.state.username) return;\r\n      let players = this.state.players;\r\n      players.push(name);\r\n      this.addLog(name + ' joined the game');\r\n      this.setState({ players });\r\n    });\r\n\r\n    socket.on('player_list', (players: string[]) => {\r\n      this.setState({ players });\r\n    }) \r\n\r\n    socket.on('player_leave', (name: string) => {\r\n      let players = this.state.players.filter(item => item !== name); // filter out the player who left\r\n      this.addLog(name + ' left the game');\r\n      this.setState({ players });\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n      // socket.io.connect();\r\n    } else {\r\n      socket.emit('join_room', roomId)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.removeAllListeners();\r\n    socket.disconnect();\r\n  }\r\n\r\n  addLog(message: string) {\r\n    let i = this.state.chat.length;\r\n    let chat = this.state.chat;\r\n    chat.push(<Log key={i} message={message} />);\r\n    this.setState({ chat });\r\n  }\r\n\r\n  addMessage(data: GuessObject) {\r\n    let i = this.state.chat.length;\r\n    let chat = this.state.chat;\r\n\r\n    chat.push(<Message key={i} data={data} />);\r\n    this.setState({ chat });\r\n  }\r\n\r\n  keyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && this.chatInput.current !== null && this.chatInput.current.value !== \"\") {\r\n      let message: string = this.chatInput.current.value;\r\n      this.chatInput.current.value = \"\";\r\n\r\n      socket.emit('guess', message);\r\n    } else if (!e.key.match(/^[a-zA-Z]+$/)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  onUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if ((e.target.value.match(/^[a-zA-Z]+$/) || e.target.value === '') && e.target.value.length <= 16) {\r\n      this.setState({ username: e.target.value });\r\n    }\r\n  };\r\n\r\n  submitUsername = () => {\r\n    socket.emit('username', { roomId: this.state.roomId, name: this.state.username });\r\n    this.setState({ needsUsername: false });\r\n  };\r\n\r\n  startGame = () => {\r\n    socket.emit('start_game');\r\n  };\r\n\r\n  render() {\r\n    if (this.state.kick) {\r\n      return <Redirect to=\"/\" />;\r\n    } else if (this.state.needsUsername) {\r\n      return <Username username={this.state.username} onUsernameChange={this.onUsernameChange} submitUsername={this.submitUsername} />;\r\n    } else {\r\n      return (\r\n        <div className=\"room row\">\r\n          {this.state.endMessage}\r\n          <div className=\"col-md-4\">\r\n            <div className=\"chat rounded-card\">\r\n              <div>\r\n                <ul className=\"messages\" ref={this.messages}>\r\n                  {this.state.chat.map(item => item)}\r\n                </ul>\r\n              </div>\r\n              <div className=\"chat-input\">\r\n                <input type=\"text\" placeholder=\"Guess here...\" onKeyDown={this.keyDown} ref={this.chatInput} disabled={!this.state.gameStarted || this.state.isHost || !this.state.isTurn} />\r\n                <span className=\"underline\"></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"container\">\r\n              <img src={svgs[this.state.svg]} id=\"img\" alt=\"Hangman\" /><br />\r\n              <div className=\"row letters-wrapper\">\r\n                {this.state.letterElements.map(item => item)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <div className=\"container\">\r\n              <StartButton isHost={this.state.isHost} gameStarted={this.state.gameStarted} onClick={this.startGame} />\r\n              {/* eslint-disable-next-line jsx-a11y/heading-has-content */}\r\n              <h1 id=\"wrong-letters\" ref={this.wrongLetters}></h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <div className=\"players rounded-card\">\r\n              <h3>Players</h3>\r\n              <ul>\r\n                {this.state.players.map(item => <li>{item}</li>)}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Room;","import React from 'react';\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport socket from '../client';\r\nimport { RoomStatus } from './Room';\r\n\r\n\r\ninterface IState {\r\n  code: number,\r\n  join: boolean\r\n}\r\n\r\nclass Home extends React.Component<{}, IState> {\r\n  readonly state: IState = { code: 0, join: false };\r\n\r\n  componentDidMount() {\r\n    socket.on('room_status', (status: RoomStatus) => {\r\n      switch(status) {\r\n        case RoomStatus.STARTED:\r\n          alert('Game already started!');\r\n          break;\r\n        case RoomStatus.INVALID:\r\n          alert('Game does not exist!');\r\n          break;\r\n        case RoomStatus.OKAY:\r\n          this.setState({ join: true });\r\n          break;\r\n      }\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.off('room_status');\r\n  }\r\n\r\n  handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value.length <= 6) {\r\n      this.setState({ code: Number.parseInt(e.target.value) });\r\n    }\r\n  }\r\n\r\n  handleJoin = () => {\r\n    socket.emit('join_room', this.state.code);\r\n  };\r\n\r\n  render() {\r\n    if (this.state.join) {\r\n      return <Redirect to={`/room/${this.state.code}`} />\r\n    } else {\r\n      return(\r\n        <div className=\"title-screen\">\r\n          <div className=\"wrapper\">\r\n            <h1>Hangman</h1>\r\n            <Link className=\"button\" to=\"/create-room\">Create Room</Link>\r\n            <div className=\"join-group\">\r\n              <input type=\"number\" name=\"code\" min={0} max={999999} value={this.state.code ? this.state.code : ''} onChange={this.handleCodeChange} />\r\n              <span className={'button' + (!this.state.code || String(this.state.code).length < 6 ? ' disabled' : '')} onClick={this.handleJoin}>Join</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport socket from '../client';\r\n\r\ninterface IState {\r\n  word: string,\r\n  code: string\r\n}\r\n\r\nclass CreateRoom extends React.Component<{}, IState> {\r\n  readonly state: IState = { word: '', code: '' }\r\n\r\n  componentDidMount() {\r\n    socket.on('room_code', (code: string) => {\r\n      this.setState({ code });\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.off('room_code');\r\n  }\r\n\r\n  onWordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value.match(/^[a-zA-Z]+$/) || e.target.value === '') {\r\n      this.setState({ word: e.target.value });\r\n    }\r\n  }\r\n\r\n  submit = () => {\r\n    socket.emit('create_room', this.state.word);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.code !== '') {\r\n      return <Redirect to={`/room/${this.state.code}`} />;\r\n    } else {\r\n      return(\r\n        <div className=\"create-room container\">\r\n          <div className=\"rounded-card\">\r\n            <h3 className=\"heading\">Enter a word</h3>\r\n            <div>\r\n              <div className=\"word-input\">\r\n                <input type=\"text\" placeholder=\"Type here...\" maxLength={16} size={16} value={this.state.word} onChange={this.onWordChange} />\r\n                <span className=\"underline\"></span>\r\n              </div>\r\n              <span className={'button button-small' + (this.state.word === '' ? ' disabled' : '')} style={{ display: 'inline' }} onClick={this.submit}>Submit</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default CreateRoom;","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './components/Home';\nimport Room from './components/Room';\nimport CreateRoom from './components/CreateRoom';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/room/:id\" component={Room} />\n        <Route path=\"/create-room\" component={CreateRoom} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}