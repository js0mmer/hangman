{"version":3,"sources":["components/Room.tsx","client.ts","images/0.svg","images/1.svg","images/2.svg","images/3.svg","images/4.svg","images/5.svg","images/6.svg","components/Username.tsx","components/Home.tsx","components/CreateRoom.tsx","App.tsx","index.tsx"],"names":["RoomStatus","socket","socketIO","Username","className","type","placeholder","maxLength","size","value","this","props","username","onChange","onUsernameChange","style","display","onClick","submitUsername","React","Component","Message","data","letter","Log","message","StartButton","isHost","gameStarted","svgs","svg0","svg1","svg2","svg3","svg4","svg5","svg6","Room","state","roomId","wordLength","letterElements","knownLetters","needsUsername","isTurn","chat","kick","svg","chatInput","createRef","messages","wrongLetters","keyDown","e","key","current","emit","match","preventDefault","target","length","setState","name","startGame","n","i","push","renderLetters","params","id","on","status","STARTED","alert","INVALID","addMessage","result","console","log","indices","addLog","innerHTML","connected","connect","removeAllListeners","disconnect","to","ref","map","item","onKeyDown","disabled","src","alt","Home","code","undefined","join","handleCodeChange","Number","parseInt","handleJoin","OKAY","min","max","String","CreateRoom","word","onWordChange","submit","off","App","basename","process","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbbc6756.chunk.js","sourcesContent":["import React from 'react';\r\nimport svg0 from '../images/0.svg';\r\nimport svg1 from '../images/1.svg';\r\nimport svg2 from '../images/2.svg';\r\nimport svg3 from '../images/3.svg';\r\nimport svg4 from '../images/4.svg';\r\nimport svg5 from '../images/5.svg';\r\nimport svg6 from '../images/6.svg';\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\r\nimport socket from '../client';\r\nimport Username from './Username';\r\n\r\nfunction Letter(n: number, letter?: string) {\r\n  return (\r\n    <h1 key={n} className=\"letter\">\r\n      {letter}\r\n    </h1>\r\n  );\r\n}\r\n\r\nfunction Message(props: { data: ChatObject }) {\r\n  return (\r\n    <li className=\"message\"><span className=\"username\">{props.data.username}</span>{props.data.letter}</li>\r\n  );\r\n}\r\n\r\nfunction Log(props: {  message: string }) {\r\n  return (\r\n    <li className=\"log\">{props.message}</li>\r\n  );\r\n}\r\n\r\nfunction StartButton(props: { isHost: boolean, onClick: (event: React.MouseEvent<HTMLSpanElement>) => void, gameStarted: boolean }) {\r\n  if (props.isHost && !props.gameStarted) {\r\n    return <span className=\"button button-small\" onClick={props.onClick}>Start</span>\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface ChatObject {\r\n  username: string,\r\n  letter: string,\r\n  indices: number[],\r\n  result?: boolean\r\n}\r\n\r\ninterface MatchParams {\r\n  id: string\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<MatchParams> {}\r\n\r\ninterface IState {\r\n  roomId: string,\r\n  wordLength: number,\r\n  letterElements: JSX.Element[],\r\n  knownLetters: { [index: number]: string },\r\n  needsUsername: boolean,\r\n  username: string,\r\n  isHost: boolean,\r\n  gameStarted: boolean,\r\n  isTurn: boolean,\r\n  chat: JSX.Element[],\r\n  kick: boolean,\r\n  svg: number\r\n}\r\n\r\nexport enum RoomStatus {\r\n  STARTED = 'STARTED',\r\n  INVALID = 'INVALID',\r\n  OKAY = 'OKAY'\r\n}\r\n\r\nconst svgs = [svg0, svg1, svg2, svg3, svg4, svg5, svg6];\r\n\r\nclass Room extends React.Component<IProps, IState> {\r\n  readonly state: IState = {\r\n    roomId: '', wordLength: 0, letterElements: [], knownLetters: {},\r\n    needsUsername: true, username: '', isHost: false, gameStarted: false,\r\n    isTurn: false,\r\n    chat: [<Log key={0} message=\"Please wait for the host to start the game\" />],\r\n    kick: false, svg: 0 };\r\n  private chatInput = React.createRef<HTMLInputElement>();\r\n  private messages = React.createRef<HTMLUListElement>();\r\n  private wrongLetters = React.createRef<HTMLHeadingElement>();\r\n\r\n  renderLetters() {\r\n    let letterElements: JSX.Element[] = [];\r\n    for (let i = 0; i < this.state.wordLength; i++) {\r\n      letterElements.push(Letter(i, this.state.knownLetters[i] ? this.state.knownLetters[i] : ''));\r\n    }\r\n\r\n    this.setState({ letterElements });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderLetters();\r\n\r\n    let roomId = this.props.match.params.id;\r\n\r\n    this.setState({ roomId });\r\n\r\n    socket.on('room_status', (status: RoomStatus) => {\r\n      switch(status) {\r\n        case RoomStatus.STARTED:\r\n          alert('Game already started!');\r\n          this.setState({ kick: true });\r\n          break;\r\n        case RoomStatus.INVALID:\r\n          alert('Game does not exist!');\r\n          this.setState({ kick: true });\r\n          break;\r\n      }\r\n    });\r\n\r\n    socket.on('guess', (data: ChatObject) => {\r\n      this.addMessage(data);\r\n\r\n      switch (data.result) { // if correct then fill in blanks\r\n        case true:\r\n          let knownLetters = this.state.knownLetters;\r\n          console.log(data.indices);\r\n\r\n          for (var i = 0; i < data.indices.length; i++) {\r\n            knownLetters[data.indices[i]] = data.letter;\r\n          }\r\n          console.log(knownLetters);\r\n          this.setState({ knownLetters });\r\n          this.renderLetters();\r\n          this.addLog('Correct!');\r\n          break;\r\n        case false: // if wrong, add to wrong letters\r\n          if (this.wrongLetters.current == null) return;\r\n          this.wrongLetters.current.innerHTML += data.letter;\r\n          this.setState({ svg: this.state.svg + 1 });\r\n          this.addLog('Nope');\r\n          break;\r\n        default:\r\n          this.addLog('Already guessed!');\r\n      }\r\n    });\r\n\r\n    socket.on('is_host', () => {\r\n      this.setState({ isHost: true, chat: [] });\r\n      this.addLog('Start the game when you are ready');\r\n    })\r\n\r\n    socket.on('start_game', () => {\r\n      this.addLog('The game has begun');\r\n\r\n      this.setState({ gameStarted: true })\r\n    });\r\n\r\n    socket.on('is_turn', (log: boolean) => {\r\n      if (log) {\r\n        this.addLog(\"It's your turn\");\r\n      }\r\n\r\n      this.setState({ isTurn: true });\r\n    });\r\n\r\n    socket.on('turn_end', () => {\r\n      this.setState({ isTurn: false });\r\n    });\r\n\r\n    socket.on('win', () => {\r\n      // TODO: win message + kick to menu\r\n      this.setState({ kick: true });\r\n    });\r\n\r\n    socket.on('lose', () => {\r\n      // TODO: lose message + kick to menu\r\n      this.setState({ kick: true });\r\n    });\r\n\r\n    socket.on('word_length', (wordLength: number) => {\r\n      this.setState({ wordLength });\r\n      this.renderLetters();\r\n    });\r\n\r\n    socket.on('no_players', () => {\r\n      alert(\"Can't start game without any players\");\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      socket.emit('join_room', roomId);\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n      // socket.io.connect();\r\n    } else {\r\n      socket.emit('join_room', roomId)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.removeAllListeners();\r\n    socket.disconnect();\r\n  }\r\n\r\n  addLog(message: string) {\r\n    let i = this.state.chat.length;\r\n    let chat = this.state.chat;\r\n    chat.push(<Log key={i} message={message} />);\r\n    this.setState({ chat });\r\n  }\r\n\r\n  addMessage(data: ChatObject) {\r\n    let i = this.state.chat.length;\r\n    let chat = this.state.chat;\r\n\r\n    chat.push(<Message key={i} data={data} />);\r\n    this.setState({ chat });\r\n  }\r\n\r\n  keyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && this.chatInput.current !== null && this.chatInput.current.value !== \"\") {\r\n      let message: string = this.chatInput.current.value;\r\n      this.chatInput.current.value = \"\";\r\n\r\n      socket.emit('guess', message);\r\n    } else if (!e.key.match(/^[a-zA-Z]+$/)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  onUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if ((e.target.value.match(/^[a-zA-Z]+$/) || e.target.value === '') && e.target.value.length <= 16) {\r\n      this.setState({ username: e.target.value });\r\n    }\r\n  };\r\n\r\n  submitUsername = () => {\r\n    socket.emit('username', { roomId: this.state.roomId, name: this.state.username });\r\n    this.setState({ needsUsername: false });\r\n  };\r\n\r\n  startGame = () => {\r\n    socket.emit('start_game');\r\n  };\r\n\r\n  render() {\r\n    if (this.state.kick) {\r\n      return <Redirect to=\"/\" />;\r\n    } else if (this.state.needsUsername) {\r\n      return <Username username={this.state.username} onUsernameChange={this.onUsernameChange} submitUsername={this.submitUsername} />;\r\n    } else {\r\n      return (\r\n        <div className=\"room row\">\r\n          <div className=\"col-md-4\">\r\n            <div className=\"chat rounded-card\">\r\n              <div>\r\n                <ul className=\"messages\" ref={this.messages}>\r\n                  {this.state.chat.map(item => item)}\r\n                </ul>\r\n              </div>\r\n              <div className=\"chat-input\">\r\n                <input type=\"text\" placeholder=\"Guess here...\" maxLength={1} onKeyDown={this.keyDown} ref={this.chatInput} disabled={!this.state.gameStarted || this.state.isHost || !this.state.isTurn} />\r\n                <span className=\"underline\"></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"container\">\r\n              <img src={svgs[this.state.svg]} id=\"img\" alt=\"Hangman\" /><br />\r\n              <div className=\"row letters-wrapper\">\r\n                {this.state.letterElements.map(item => item)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <div className=\"container\">\r\n              <StartButton isHost={this.state.isHost} gameStarted={this.state.gameStarted} onClick={this.startGame} />\r\n              {/* eslint-disable-next-line jsx-a11y/heading-has-content */}\r\n              <h1 id=\"wrong-letters\" ref={this.wrongLetters}></h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Room;","import socketIO from 'socket.io-client';\r\n\r\nconst serverURL = 'https://js0mmer-hangman.herokuapp.com/';\r\nconst socket = socketIO(serverURL);\r\n\r\nexport default socket;","export default __webpack_public_path__ + \"static/media/0.fbbd1466.svg\";","export default __webpack_public_path__ + \"static/media/1.5f0f9ade.svg\";","export default __webpack_public_path__ + \"static/media/2.3c45b9c6.svg\";","export default __webpack_public_path__ + \"static/media/3.02a39ce4.svg\";","export default __webpack_public_path__ + \"static/media/4.02b609cb.svg\";","export default __webpack_public_path__ + \"static/media/5.c7d5ecb9.svg\";","export default __webpack_public_path__ + \"static/media/6.f6b3de7b.svg\";","import React from 'react';\r\n\r\ninterface IProps {\r\n  onUsernameChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n  submitUsername: (event: React.MouseEvent<HTMLSpanElement>) => void,\r\n  username: string\r\n}\r\n\r\nclass Username extends React.Component<IProps> {\r\n  render() {\r\n    return(\r\n    <div className=\"create-room container\">\r\n        <div className=\"rounded-card\">\r\n        <h3 className=\"heading\">Enter a username</h3>\r\n        <div>\r\n            <div className=\"word-input\">\r\n            <input type=\"text\" placeholder=\"Type here...\" maxLength={16} size={16} value={this.props.username} onChange={this.props.onUsernameChange} />\r\n            <span className=\"underline\"></span>\r\n            </div>\r\n            <span className={'button button-small' + (this.props.username === '' ? ' disabled' : '')} style={{ display: 'inline' }} onClick={this.props.submitUsername}>Submit</span>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Username;","import React from 'react';\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport socket from '../client';\r\nimport { RoomStatus } from './Room';\r\n\r\n\r\ninterface IState {\r\n  code: number | undefined,\r\n  join: boolean\r\n}\r\n\r\nclass Home extends React.Component<{}, IState> {\r\n  readonly state: IState = { code: undefined, join: false };\r\n\r\n  componentDidMount() {\r\n    socket.on('room_status', (status: RoomStatus) => {\r\n      switch(status) {\r\n        case RoomStatus.STARTED:\r\n          alert('Game already started!');\r\n          break;\r\n        case RoomStatus.INVALID:\r\n          alert('Game does not exist!');\r\n          break;\r\n        case RoomStatus.OKAY:\r\n          this.setState({ join: true });\r\n          break;\r\n      }\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n  }\r\n\r\n  handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value.length <= 6) {\r\n      this.setState({ code: Number.parseInt(e.target.value) });\r\n    }\r\n  }\r\n\r\n  handleJoin = () => {\r\n    socket.emit('join_room', this.state.code);\r\n  };\r\n\r\n  render() {\r\n    if (this.state.join) {\r\n      return <Redirect to={`/room/${this.state.code}`} />\r\n    } else {\r\n      return(\r\n        <div className=\"title-screen\">\r\n          <div className=\"wrapper\">\r\n            <h1>Hangman</h1>\r\n            <Link className=\"button\" to=\"/create-room\">Create Room</Link>\r\n            <div className=\"join-group\">\r\n              <input type=\"number\" name=\"code\" min={0} max={999999} value={this.state.code} onChange={this.handleCodeChange} />\r\n              <span className={'button' + (!this.state.code || String(this.state.code).length < 6 ? ' disabled' : '')} onClick={this.handleJoin}>Join</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport socket from '../client';\r\n\r\ninterface IState {\r\n  word: string,\r\n  code: string\r\n}\r\n\r\nclass CreateRoom extends React.Component<{}, IState> {\r\n  readonly state: IState = { word: '', code: '' }\r\n\r\n  componentDidMount() {\r\n    socket.on('room_code', (code: string) => {\r\n      this.setState({ code });\r\n    });\r\n\r\n    if (!socket.connected) {\r\n      socket.connect();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    socket.off('room_code');\r\n  }\r\n\r\n  onWordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value.match(/^[a-zA-Z]+$/) || e.target.value === '') {\r\n      this.setState({ word: e.target.value });\r\n    }\r\n  }\r\n\r\n  submit = () => {\r\n    socket.emit('create_room', this.state.word);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.code !== '') {\r\n      return <Redirect to={`/room/${this.state.code}`} />;\r\n    } else {\r\n      return(\r\n        <div className=\"create-room container\">\r\n          <div className=\"rounded-card\">\r\n            <h3 className=\"heading\">Enter a word</h3>\r\n            <div>\r\n              <div className=\"word-input\">\r\n                <input type=\"text\" placeholder=\"Type here...\" maxLength={16} size={16} value={this.state.word} onChange={this.onWordChange} />\r\n                <span className=\"underline\"></span>\r\n              </div>\r\n              <span className={'button button-small' + (this.state.word === '' ? ' disabled' : '')} style={{ display: 'inline' }} onClick={this.submit}>Submit</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default CreateRoom;","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport './css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './components/Home';\nimport Room from './components/Room';\nimport CreateRoom from './components/CreateRoom';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/room/:id\" component={Room} />\n        <Route path=\"/create-room\" component={CreateRoom} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}